buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.9.RELEASE")
    }
}

plugins {
  id 'org.ajoberstar.grgit' version '2.1.0'
}
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
jar {
    baseName = 'iam-shibboleth'
    version =  '1.0.0'
}

repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
    mavenLocal()
    maven {
      url 'https://build.shibboleth.net/nexus/content/groups/public'
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.4.12'
    // compile 'net.shibboleth.idp:idp-attribute-resolver-api:${idp.version}'
    compile 'net.shibboleth.idp:idp-attribute-resolver-api:3.3.2'
    // compile 'org.opensaml:opensaml-saml-api:${opensaml.version}'
    compile 'org.opensaml:opensaml-saml-api:3.2.0'
    // compile 'net.shibboleth.utilities:java-support:${java-support.version}'
    compile 'net.shibboleth.utilities:java-support:7.2.0'
    // compile 'net.shibboleth.ext:spring-extensions:${spring-extensions.version}'
    compile 'net.shibboleth.ext:spring-extensions:5.2.0'
    compile 'org.ajoberstar:grgit:2.1.0'

    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    compile("org.springframework.boot:spring-boot-starter-jetty")
    // end::jetty[]
    // tag::actuator[]
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-data-jpa") {
      exclude module: "spring-boot-starter-tomcat"
    }
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("org.springframework.boot:spring-boot-starter-test")
    compile("org.springframework.boot:spring-boot-starter")
    testCompile("junit:junit")
}

task clone(type: GradleBuild) {
  tasks = ['build','deleteClone','retrieveClone']
}
task retrieveClone {
  description = 'Pushes current branch\'s committed changes to origin repo.'
  doLast {
    grgit.clone(dir: 'java-identity-provider', uri:'git://git.shibboleth.net/java-identity-provider.git', bare: false, refToCheckout: '3.3.2')
  }
}
task deleteClone(type: Delete) {
  delete 'java-identity-provider'
}